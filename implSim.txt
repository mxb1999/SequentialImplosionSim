#include <iostream>
#include <omp.h>
#include <vector>
#include <string>
#include <fstream>
#include <omp.h>
#include <cmath>
#include "customMath.h"
#include "implSim.h"
using namespace std;

void span(double* target, double start, double stop, int num)
{
  float increment = (stop-start)/num;
  for(int i = 0; i <= num; i++)
  {
    *(target + i) = start + (increment*i);
  }
}
void initialize()
{
  cout << "Setting initial conditions for ray tracker..." <<endl;
  cout << "nrays per beam is"<< nrays <<endl;

  eden = new double*[nx];
  dedendx = new double*[nx];
  dedendz = new double*[nx];
  x = new double*[nx];
  z = new double*[nx];
  edep_x = new double*[nx+2];
  edep_z = new double*[nx+2];
  edep = new double**[nx+2];
  etemp = new double*[nx];
  machnum = new double*[nx];
  wpe = new double*[nx];
  eden_norm = new double*[nx];

  for(int i = 0; i < nx;i++)
  {
    for(int j = 0; j < nz;i++)
    {

        *(eden[i]+j) = fmax(0.0,((0.3*ncrit-0.1*ncrit)/(xmax-xmin))*(*(x[i]+j)-xmin)+(0.1*ncrit));
        *(etemp[i]+j) = 100.0;
        *(machnum[i]+j) = fmax(0.0,(((-0.4)-(-2.4))/(xmax-xmin))*(*(x[i]+j)-xmin))+(-2.4);
        *(wpe[i]+j) = sqrt(*(eden[i]+j)*1e6*pow(ec,2.0)/me*e0);
        *(eden_norm[i]+j) = *(eden[i]+j);
    }
  }
  for (int i=0;i<=nx-1;++i)
  {
	   for (int j=0;j<=nz-1;++j)
     {
       *(dedendz[i]+j) = (*(eden[i]+j+1)-*(eden[i]+j)-*(eden[i]+j)/(*(z[i]+j+1))-*(z[i]+j));
       *(dedendx[i]+j) = (*(eden[i]+j+1)-*(eden[i]+j))/(*(z[i]+j+1)-*(z[i]+j));
	   }
  }
  double storagex[nx];
  span(storagex,zmin, zmax, nx);
  dedendx[nx-1]=dedendx[nx-2];
  for(int i = 0; i < nx; i++)
  {
    for(int j = 0; j < nz; j++)
    {
        *(x[j]+i) = storagex[j];
    }
    span(z[i],zmin, zmax, nx);
  }
  for(int i = 0; i < nx; i++)
  {
    *(dedendz[i]+nz-1)=*(dedendz[i]+nz-2);
  }
  phase_x = new double[nrays];
  span(phase_x, beam_min_z,beam_max_z,nrays);
  pow_x = new double[nrays];
  for(int i = 0; i < nrays; i++)
  {
    pow_x[i] = exp(-1*pow(pow((phase_x[i]/sigma),2.0),(4.0/2.0)));
  }
  myx= new double[nt]; myz= new double[nt];
  mykx=new double[nt]; mykz=new double[nt];
  myvx=new double[nt]; myvz=new double[nt];
  uray=new double[nt]; nuei=new double[nt];
  amplitude_norm=new double[nt];
  for(int i = 0; i < nt;i++)
  {
    uray[i] = 1.0;
    nuei[i] = 1.0;
    amplitude_norm[i] = 1.0;
  }
  mytime=new double[nt];
  span(mytime,dt,nt*dt,nt);
  finalts = new double*[nrays];//nrays, nbeams
  mysaved_x = new double**[nt];//nt, nrays, nbeams
  mysaved_z = new double**[nt];//nt , nrays, nbeams
  marked=new double***[nx];//nx, nz, numstored, nbeams
  present=new double**[nx];//nx nz nbeams
  markingx = new int[nt];
  markingz = new int[nt];
  xbounds = new double[nt];
  zbounds = new double[nt];
  xbounds_double = new double[nt];
  zbounds_double = new double[nt];
  crossesx = new double**[nbeams];//nbeams nrays ncrossings
  crossesz = new double**[nbeams];//nbeams nrays ncrossings
  boxes = new double***[nbeams];//nbeams nrays ncrossings 2
  ints = new double**[nbeams];//nbeams nrays ncrossings
  x0 =  new double[nrays];
  z0 = new double[nrays];
  kx0 = new double[nrays];
  kz0 = new double[nrays];
  i_b1 = new double* [nx];
  i_b2 = new double* [nx];
  span(z0, beam_min_z, beam_max_z, nrays);
  for(int i = 0; i < nrays;i++)
  {
    kx0[i] = 1.0;
    kz0[i] = -0.1;
    x0[i] = xmin-(dt/courant_mult*c*0.5);
    z0[i] = z0[i]+offset-(dz/2)-(dt/courant_mult*c*0.5);
  }
}


void launchRays()
{
  cout << "Tracking Rays" << endl;
  int if_ray_tracker_diagnostic = 1;
  interpFunc* powVPhase = new interpFunc(pow_x, phase_x, nrays);
  int beam = 1;
  cout << "BEAMNUM is" << beam << endl;

  for(int i = 0; i < nrays;i++)
  {
    raynum = i;
    uray[i] = uray_mult*powVPhase->getInterp(z0[i]);
    injected += uray[i];
    launch_ray_XZ(x0[i],z0[i],kx0[i],kz0[i]);
    *(finalts[i] + beam) = finalt;
    if(if_ray_tracker_diagnostic == 1 && i % 20 ==0)
    {
      cout << "      ..." << int(100.*(1.0-(double(i)/double(1*nrays))) << "%  remaining..." <<  '\n';
    }

  }
  x0 = new double[nrays];
  span(x0, beam_min_z, beam_max_z, nrays);
  beam = 2;
  cout << "BEAMNUM is" << beam << endl;
  for(int i = 0; i < nrays;i++)
  {
    z0[i] = zmin-(dt/courant_mult*c*0.5);
    x0[i]-= (dx/2+dt/courant_mult*c*0.5);
    kx0[i] = 0.0;
    kz0[i] = 1.0;
    raynum = i;
    uray[i] = uray_mult*powVPhase->getInterp(z0[i]);
    injected += uray[i];
    launch_ray_XZ(x0[i],z0[i],kx0[i],kz0[i]);
    *(finalts[i] + beam) = finalt;
    if(if_ray_tracker_diagnostic == 1 && i % 20 ==0)
    {
      cout << "      ..." << int(100.*(1.0-(double(n)/double(1*nrays))) << "%  remaining..." <<  '\n';
    }
  }
//plots here____________-
int if_intersection_diagnostics = 0;
intersections = new double*[nx];
for(int i = 1; i < nx;i++)
{
  for(int j = 1; j < nz; i++)
  {
    for(int m = 0; m < numstored; m++)
    {
      if(if_intersection_diagnostics == 1)
      {
        cout << "i, j, and, m are now"<<i<<j<<m <<endl;
      }
      if(*(*(*(marked[i] + j) + m)+1) == 0)
      {
        break;
      }else
      {
        int iray1 = *(*(*(marked[i] + j) + m)+1);
        for(int l = 0; l < numstored; l++)
        {
          if(*(*(*(marked[i] + j) + m)+2)==0)
          {
            if(l == 1)
            {
              if(if_intersection_diagnostics == 1)
              {
                cout << "======= In zone (i,j)"<< i << j << "================="<<endl;
                cout << "found Rays"<< iray1 << " but none from other beams"<<endl;
                cout << "-------------------------------------------------"<<endl;
              }
            }
            break;
          }else
          {
            if(if_intersection_diagnostics == 1)
            {
              cout << "========== Intersection found! =========="<<endl;
              int iray2 = *(*(*(marked[i]+j)+m)+2);
              cout << "  Beam:" << "Ray:" << iray1 << "intersects with";
              cout << "        Beam:" << 2 << "Ray:" << iray2;
              cout << "        in zone labeled (i,j):" << i << j << endl;
              cout <<  "-----------------------------------------"<<endl;
            }
            *(intersections[i]+j) += 1.0;
          }
        }
      }
    }
  }
}
}
void cbet()
{
  double constant1 = (pow(estat,2.0))/(4*(1.0e3*me)*c*omega*kb*Te*(1+3*Ti/(Z*Te)));
  cout << "Calculating CBET gains" << endl;
  double cs = 1e2*sqrt(ec*(Z*Te_eV+3.0*Ti_eV)/mi_kg);	// acoustic wave speed, approx. 4e7 cm/s in this example
  double u_flow[nx][nz];
  double dkx[nbeams][nrays][2];
  double dkz[nbeams][nrays][2];
  double dkmag[nbeams][nrays][2];
  double W1[nx][nz];
  double W2[nx][nz];
  double W1_init[nx][nz];
  double W2_init[nx][nz];
  double W1_new[nx][nz];
  double W2_new[nx][nz];
  vector<double> nonzeros1;
  vector<double> nonzeros2;
  for(int i = 0; i < nx;i++)
  {
    for(int j = 0; j < nz;j++)
    {
      *(i_b1[i]+j) = *(*(edep[i]+j)+1);
      *(i_b2[i]+j) = *(*(edep[i]+j)+2);
      u_flow[i][j] = *(machnum[i]+j)*cs;
    }
  }
  int if_cbet_gain_diagnostics = 0;
  	// acoustic wave speed, approx. 4e7 cm/s in this example

  for(int i = 0; i < nbeams-1;i++)
  {
    for(int j = 0; j < nrays; j++)
    {
      for(int m = 0; m < ncrossings;m++)
      {
        if(*(*(*(boxes[i]+ j)+ m)+ 1) == 0 || *(*(*(boxes[i]+ j)+ m)+ 2) == 0 )
        {
          if(if_cbet_gain_diagnostics == 1)
          {
            cout << "Last crossing for beam" << i << " ray " << j << " was crossing " << m << "!" << endl;
            break;
          }
        }
        //marked array has dimensions nx nz numstored nbeams
        int ix = *(*(*(boxes[i]+ j)+ m)+ 1);
        int iz = *(*(*(boxes[i]+ j)+ m)+ 2);
        if(if_cbet_gain_diagnostics == 1)
        {
          cout << "================================================================"<<endl;
          cout << "Checking box " << ix << iz << endl;
          if(*(intersections[ix]+iz) != 0)
          {

            int numrays1 = 0;
            int numrays2 = 0;
            for(int s = 0; s < numstored;s++)
            {
              if(*(*(*(marked[ix]+iz)+s)) != 0)
              {
                nonzeros1.push_back(s);
                numrays1++;
              }
              if(*(*(*(marked[ix]+iz)+s)+1) != 0)
              {
                nonzeros2.push_back(s);
                numrays2++;
              }
            }
            if(if_cbet_gain_diagnostics == 1)
            {
              cout << "     # of rays in beam 1: "<<numrays1<<"  # of rays in beam 2:"<<numrays2<<endl;
            }
            int marker1[numrays1];
            int marker2[numrays2];
            int mark2Copy[numrays2];
            int fmax = fmax(numrays1, numrays2)
            int cnt1 = 0;
            int cnt2 = 0;
            for(int l = 0; l < fmax; l++)
            {
              if(l < numrays1)
              {
                marker1[l] = *(*(*(marked[ix]+iz)+nonzeros1[l])+1);
              }
              if(l < numrays2)
              {
                marker2[l] = *(*(*(marked[ix]+iz)+nonzeros2[l])+2);
                mark2Copy[l] = *(*(*(marked[ix]+iz)+nonzeros2[l])+2);
              }
            }
          }
          int j2 = marker2[0];
          int m2 = marker2[0];
          if(if_cbet_gain_diagnostics == 1)
          {
            cout << "     Ray #s from beam 1 are"<<marker1<<"Ray #s from beam 2 are"<<marker2<<endl;
          }

          for(int r = 0; r < numrays1;r++)
          {
            if(marker1[r] == j)
            {
              if(if_cbet_gain_diagnostics == 1)
              {
              cout << "            Beam #1 ray number"<<rr1<<"is number"<<rrr<<"in its box."<<endl;
                ray1num = rrr;
                break;
              }
            }
          }
          for(int n = 0; n < numrays2; n++)
          {
            for(int q = 0; q <ncrossings; q++)
            {
              int ix2 = *(*(*(boxes[i+1]+ mark2Copy[n])+ q) + 1);
              int iz2 = *(*(*(boxes[i+1]+ mark2Copy[n])+ q) + 2);
              if ( ix == ix2 && iz == iz2 )
              {
                mark2Copy[n] = q;
                break;
              }
            }
          }
        }
        if ( if_cbet_gain_diagnostics == 1 ){;
        cout<< "             Beam #1 crossing number is    cc1"<<cc1;
        cout<< "             Beam #2 crossing rays have rr2 & cc2"<<rr2<<cc2;
        };

        n2limit = fmin(*(*(present[ix]+iz)+1),numrays2);

        for ( int n2 = 1; n2 < n2limit; n2++)
        {
          if ( if_cbet_gain_diagnostics == 1 )
          {
          cout<< "     Calculating bb, rr1, cc1"<<i<<j<<m<<"with bb+1, rr2, cc2"<<bb+1<<marker2[n2]<<mark2Copy[n2];
          }
          double ne = *(eden[ix]+iz);
          double epsilon = 1.0-ne/ncrit;
          double kmag = (omega/c)*sqrt(epsilon);         // magnitude of wavevector

          double kx1 = kmag*(*(*(dkx[i]+j)+m))/(*(*(dkmag[i]+j)+m)+1.0e-10));
          double kx2 = kmag*(*(*(dkx[i+1] + marker2[n2]) + mark2Copy[n2]))/(*(*(dkmag[i+1] + marker2[n2]) + mark2Copy[n2])+1.0e-10));
          double kz1 = kmag*(*(*(dkz[i] + j) + m))/(*(*(dkmag[i] + j) + m)+1.0e-10);
          double kz2 = kmag*(*(*(dkz[i] + j) + m))/(*(*(dkmag[i+1] + marker2[n2]) + mark2Copy[n2])+1.0e-10));

  			  if ( if_cbet_gain_diagnostics == 1 ){;
          		cout, "       kx1, kx2, kz1, kz2 are",kx1,kx2,kz1,kz2<<endl;
            }
          double kiaw = pow(sqrt((kx2-kx1),2.0)+pow((kz2-kz1),2.0));
        // magnitude of the difference between the two vectors
  			  if ( if_cbet_gain_diagnostics == 1 ){;
          		cout, "       kiaw is",kiaw<<endl;
          double ws = kiaw*cs            // acoustic frequency, cs is a constant
          double omega1= omega;  // laser frequency difference. To start, just zero.
          double omega2 = omega;
   		    double eta = ((omega2-omega1)-(kx2-kx1)*u_flow[ix][iz])/(ws+1.0e-10)
        }
  			 if ( if_cbet_gain_diagnostics == 1 ){;
  		        cout<< "       eta is"<<eta<<endl;
            }
         double efield1 = sqrt(8.*pi*1.0e7*(*(i_b1[ix]+iz)))/c);             // initial electric field of ray
         double efield2 = sqrt(8.*pi*1.0e7*(*(i_b2[ix]+iz))/c);             // initial electric field of ray

         double P = ((iaw)^2*eta)/((eta^2-1.0)^2+(iaw)^2*eta^2);         // From Russ's paper
  			 if ( if_cbet_gain_diagnostics == 1 ){
          		cout<< "       P is"<<P<<endl;
                        double gain1 = constant1*efield2^2*(ne/ncrit)*(1/iaw)*P;               //L^-1 from Russ's paper
                        double gain2 = constant1*efield1^2*(ne/ncrit)*(1/iaw)*P;
        }           //L^-1 from Russ's paper
  			 if ( if_cbet_gain_diagnostics == 1 ){
          		cout<< "       gain2 is"<<gain2<<endl;
            }
                          // new energy of crossing (PROBE) ray (beam 2)
                          if ( *(*(dkmag[i+1]+marker2[n2])+mark2Copy[n2]) >= 1.0*dx ){
                              *(W2_new[ix]+iz) = *(W2[ix]+iz)*exp(-1*(*(W1[ix]+iz))*(*(*(dkmag[i+1]+marker2[n2])+mark2Copy[n2])))*gain2/sqrt(epsilon));
                            *(*(W2_storage[ix]+iz)+n2) = *(W2_new[ix]+iz);
                          }
                              // new energy of primary (PUMP) ray (beam 1)
  // USE W1_new formula:
                              *(W1_new[ix]+iz) = *(W1[ix]+iz)*exp(-1*(*(W2[ix]+iz))*(*(*(dkmag[i]+j)+m)))*gain2/sqrt(epsilon));

  // ENFORCE Energy conservation:
  //	       	                W1_new(ix,iz) = W1(ix,iz)-(W2_new(ix,iz)-W2(ix,iz));

                              *(*(W1_storage[ix]+iz)+raynum) = *(W1_new[ix]+iz);
  //				W1(ix,iz) = W1_new(ix,iz)

  			if ( if_cbet_gain_diagnostics == 1 ){
  		        cout<< "                W1(ix,iz) is"<<W1(ix,iz)<<endl;
  		        cout<< "                    dkmag is"<<dkmag(bb+1,rr2(n2),cc2(n2))<<endl;
          		cout<< "                    gain2 is"<<gain2<<endl;
         			cout<< "                sqrt(eps) is"<<sqrt(epsilon)<<endl;
         			cout<< "         multiplicat term is"<<-1*W1(ix,iz)*dkmag(bb+1,rr2(n2),cc2(n2))*gain2/sqrt(epsilon)<<endl;
  		        cout<< "         exponential term is"<<exp(-1*W1(ix,iz)*dkmag(bb+1,rr2(n2),cc2(n2))*gain2/sqrt(epsilon))<<endl;
            }
  			if ( if_cbet_gain_diagnostics == 1 ){
  		        cout<< "       W1_init(ix<<iz) & W1_new(ix<<iz) are"<<W1_init(ix<<iz)<<W1_new(ix<<iz)<<endl;
          		cout<< "       W1_new(ix<<iz)/W1_init(ix<<iz) is  "<<W1_new(ix<<iz)/W1_init(ix<<iz)<<endl;
      			  cout<< "       W2_init(ix<<iz) & W2_new(ix<<iz) are"<<W2_init(ix<<iz)<<W2_new(ix<<iz)<<endl;
          		cout<< "       W2_new(ix<<iz)/W2_init(ix<<iz) is  "<<W2_new(ix<<iz)/W2_init(ix<<iz)<<endl;
          		cout<< "       (W1_new  + W2_new) (ix<<iz) is"<<W1_new(ix<<iz)+W2_new(ix<<iz)<<endl;
          		cout<< "       (W1_init + W2_init)(ix<<iz) is"<<W1_init(ix<<iz)+W2_init(ix<<iz)<<endl;
          		cout<< "       (W1_new  + W2_new)/(W1_init + W2_init) is"<<(W1_new(ix<<iz)+W2_new(ix<<iz))/(W1_init(ix<<iz)+W2_init(ix<<iz))<<endl;
            }
  			}
        if ( rr1 % 20 == 0 )
        {
          print,"     ...",int(100.*(1.0-(double(rr1)/double(1*nrays)))),"%  remaining..."
        }
      }
  }
  double clo = 0.99;
  double chi = 1.0;
  cout << "Updating intensities due to CBET gains" << endl;
  double i_b1_new[nx][nz];
  double i_b2_new[nx][nz];
  for(int i = 0;i < nx; i++)
  {
    for(int j = 0; j < nz; j++)
    {
      i_b1_new[i][j] = i_b1[i][j];
      i_b2_new[i][j] = i_b2[i][j];
    }
  }
  if_cbet_gain_diagnostics = 0;
  for(int b = 0; b < beams - 1; b++)
  {
    for(int r = 0; r < nrays; r++)
    {
      for(int m = 0; m < ncrossings; m++)
      {
        if(*(*(*(boxes[b] + r) + m) + 1) == 0 || *(*(*(boxes[b] + r) + m) + 2) == 0)
        {
          if(if_cbet_gain_diagnostics == 1)
          {
            cout << "Last crossing for beam " << b << " ray " << r << " was crossing " << m << "!" << endl;
            break;
          }
        }
          int ix = *(*(*(boxes[b] + r) + m) + 1);
          int iz = *(*(*(boxes[b] + r) + m) + 2);
          if(if_cbet_gain_diagnostics == 1)
          {
            cout << "Checking Box" << ix << " || "<< iz << endl;
          }
          if(*(intersections[ix] + iz) != 0)
          {

            nonzeros1 = new vector<int>;
            nonzeros2 = new vector<int>;
            for(int l = 0; l < numstored;l++)
              {
                if((((marked[ix]+ iz)+ l)+ 1) != 0)
                {
                  nonzeros1.push_back(l);
                }
                if((((marked[ix]+ iz)+ l)+ 2) != 0)
                {
                  nonzeros2.push_back(l);
                }
              }
              int numrays1 = nonzeros1.size();
              int numrays2 = nonzeros2.size();
             int marker1[numrays1];
             int marker2[numrays2];
             int r2Copy[numrays2];
             int c2Copy[numrays2];
             for(int l = 0; l < fmax(numrays1, numrays2);l++)
             {
               if(l < numrays1)
               {
                 marker1[l] = *(*(*(marked[ix]+iz)+nonzeros1[l])+1);
               }
               if(l < numrays2)
               {
                 marker2[l] = *(*(*(marked[ix]+iz)+nonzeros2[l])+2);
                 r2Copy[l] = marker2[l];
                 c2Copy[l] = marker2[l];
               }
              for(int n = 0; n < numrays2;n++)
              {
                for(int l = 0; l < ncrossings;l++)
                {
                  double ix2 = *(*(*(boxes[b+1]+r2Copy[n])+ l)+ 1);
                  double iz2 = *(*(*(boxes[b+1]+r2Copy[n])+ l)+ 2);
                  if(ix == ix2 && iz == iz2)
                  {
                    c2Copy[n] = l;
                    break;
                  }
                }
              }
              double fractional_change_1 = (-1.0*(1.0 - (*(W1_new[ix] + iz)/*(W1_init[ix] + iz))) * (*(i_b1[ix] + iz)));
              double fractional_change_2 = (-1.0*(1.0 - (*(W2_new[ix] + iz)/*(W2_init[ix] + iz))) * (*(i_b2[ix] + iz)));
              i_b1_new[ix][iz] += fractional_change_1;
              i_b2_new[ix][iz] += fractional_change_1;
              double x_prev_1 = *(x[ix] + iz);
              double z_prev_1 = *(z[ix] + iz);
              double x_prev_2 = *(x[ix] + iz);
              double z_prev_2 = *(z[ix] + iz);
              for(int l = m+1; l < ncrossings; l++)
              {
                int ix_next_1 = *(*(*(boxes[1]+r)+l)+1);
                int iz_next_1 = *(*(*(boxes[1]+r)+l)+2);
                double x_curr_1 = *(x[ix_next_1] + iz_next_1);
                double z_curr_1 = *(z[ix_next_1] + iz_next_1);
                if(ix_next_1 == 0 || iz_next_1 == 0)
                {
                  break;
                }else
                {
                  if(x_curr_1 != x_prev_1 || z_curr_1 != z_prev_1)
                  {
                    i_b1_new[ix_next_1][iz_next_1] +=fractional_change_1 * (*(*(present[ix] + iz) + 1)/(*(*(present[ix_next_1] + iz_next_1) + 1)));
                  }
                  x_prev_1 = x_curr_1;
                  z_prev_1 = z_curr_1;
                }
              }
              int n2 = fmin(ray1num, numrays2);

              for(int l = c2Copy(n2) + 1; l < ncrossings; l++)
              {
                ix_next_2 = *(*(*(boxes[2]+r2Copy[n2])+l)+1);
                iz_next_2 = *(*(*(boxes[2]+r2Copy[n2])+l)+2);
                int x_curr_2 = *(x[ix_next_2] + iz_next_2);
                int z_curr_2 = *(z[ix_next_2] + iz_next_2);
                if(ix_next_2 == 0 || iz_next_2 == 0)
                {
                  break;
                }else
                {
                  if(x_curr_2 != x_prev_2 || z_curr_2 != z_prev_2)
                  {
                    i_b2_new[ix_next_2][iz_next_2] += fractional_change_2*(*(*(present[ix]+iz)+1))/(*(*(present[ix_next_2]+iz_next_2)+2));
                  }
                  x_prev_2 = x_curr_2;
                  z_prev_2 = x_prev_2;
                }
              }
          }
        }
    }
    if(r % 20 == 0)
    {
      cout << "     ..." << int(100.*(1.0-(double(rr1)/double(1*nrays)))) << "%  remaining..."<<endl;
    }
  }
}
}
//use two threads here
void launch_ray_XZ(double x_init, double z_init, double kx_init, double kz_init)
{
  myx[0] = x_init;
  myz[0] = z_init;
  for(int i = 0;i < fmax(nx,nz);i++)
  {
    if(myx[0]-*(x[i]) <= (0.5 +1.0e-100)*dx && myx[0]-*(x[i])>=-1*(0.5+1e-10)*dx)
    {
      thisx_0=i;
      thisx_00=i;
      break;
    }
  }
  for(int i = 0;i < nz;i++)
  {
    if(myz[0]-*(z[i]) <= (0.5 +1.0e-100)*dx && myz[0]-*(z[i])>=-1*(0.5+1e-10)*dz)
    {
      thisz_0=i;
      thisz_00=i;
      break;
    }
  }
  double k = sqrt((pow(omega,2.0)-pow(*(wpe[thisx_0]+thisz_0),2.0)/pow(c,2.0)));
  double knorm = sqrt(pow(kx_init,2.0)+pow(kz_init,2.0));
  mykx[0]=(kx_init/knorm)*k;			// Normalized value for the ray's initial k_x
  mykz[0]=(kz_init/knorm)*k;			// Normalized value for the ray's initial k_z
  myvx[0] = pow(c,2.0)*mykx[0]/omega;                   // v_group, group velocity (dw/dk) from D(k,w).
  myvz[0] =  pow(c,2.0)*mykz[0]/omega;
  markingx[0] = thisx_0;
  markingz[0] = thisz_0;
  xbounds[0] = myx[0];
  zbounds[0] = myz[0];
  int numcrossing = 1;
  for(int i = 1; i < nt;i++)
  {
    myvz[i] = myvz[i-1] - pow(c,2.0)/(2.0*ncrit)*(*(dedendz[thisx_0])+thisz_0)*dt;
    myvx[i] = myvx[i-1] - pow(c,2.0)/(2.0*ncrit)*(*(dedendx[thisx_0])+thisz_0)*dt;
    myx[i] = myx[i-1] + myvx[i]*dt;
    myz[i] = myz[i-1] + myvx[i]*dt;

    int search_index_x = 1;
    int search_index_z = 1;
      int thisx_m = fmax(0, thisx_0-search_index_x);
      int thisx_p = fmin(nx, thisx_0+search_index_x);
      int thisz_m = fmax(0, thisz_0-search_index_z);
      int thisz_p = fmin(nz, thisz_0+search_index_z);
      for(int j = thisx_m; j < thisx_p;j++)
      {
        if ( myx[i] - *(x[j]) <= (0.5+1.0e-10)*dx && myx[i] - *(x[j]) >= -(0.5+1.0e-10)*dx ){
                        thisx = j;
                        break;
            };
      }
      for(int j = thisz_m; j < thisz_p; j++)
      {
        if ( myz[i] - *(z[j]) <= (0.5+1.0e-10)*dz && myz[i] - *(z[j]) >= -(0.5+1.0e-10)*dz ){
                        thisz = j;
                        break;
            };
      }
      double linez[2]={myz[i-1], myz[i]};
      double linex[2]={myx[i-1], myx[i]};
      int lastx = 10000;
      int lastz = 10000;

      thisx_m = fmax(0, thisx_0-search_index_x);
      thisx_p = fmin(nx, thisx_0+search_index_x);
      thisz_m = fmax(0, thisz_0-search_index_z);
      thisz_p = fmin(nz, thisz_0+search_index_z);
      interpFunc* lineFunc = new interpFunc(linez, linex, 2);
      for(int j = thisx_m; j < thisx_p;j++)
      {
        double currx = *(x[j])-dx/2;
        if((myx[i] > currx && myx[i-1] <= currx) || (myx[i] < currx && myx[i-1] >= currx))
        {
          double crossx = lineFunc->getInterp(currx);
          if(abs(crossx-lastz)>1.0e-20)
          {
            *(*(ints[beam]+raynum)+numcrossing)=uray[i];
            *(*(crossesx[beam]+raynum)+numcrossing) = currx;
            *(*(crossesz[beam]+raynum)+numcrossing) = crossx;
            if(myx[i] <= xmax+dx/2&&myx[i] >=xmin-dx/2)
            {
              **(*(boxes[beam]+raynum)+numcrossing) = thisx;
              *(*(*(boxes[beam]+raynum)+numcrossing) + 1)= thisz;
            }
            lastx = currx;
            numcrossing += 1;
            break;
          }
        }
      }
      for(int j = thisz_m; j < thisz_p;j++)
      {
        double currz = *(x[j])-dz/2;
        if((myz[i] > currz && myz[i-1] <= currz) || (myz[i] < currz && myz[i-1] > currz))
        {
           double crossz = lineFunc->getInterp(currz);
          if(abs(crossz-lastx)>1.0e-20)
          {
            *(*(ints[beam]+raynum)+numcrossing)=uray[i];
            *(*(crossesz[beam]+raynum)+numcrossing) = currz;
            *(*(crossesz[beam]+raynum)+numcrossing) = crossz;
            if(myz[i] <= zmax+dz/2&&myz[i] >=zmin-dz/2)
            {
              **(*(boxes[beam]+raynum)+numcrossing) = thisx;
              *(*(*(boxes[beam]+raynum)+numcrossing) + 1)= thisz;
            }
            lastz = currz;
            numcrossing += 1;
            break;
          }
        }
      }
      thisx_0 = thisx;
      thisz_0 = thisz;
      markingx[i] = thisx;
      markingz[i] = thisz;
      if(markingx[i] != markingx[i-1] && markingz[i] != markingz[i-1])
      {
        ztarg = *(z[thisx]+ thisz) - (dz/2.0);
        if(myvz[i] < 0.0)
        {
          ztarg = *(z[thisx]+ thisz) + (dz/2.0);
        }
        slope = (myz[i] - myz[i-1])/(myx[i] - myx[i-1]+1.0e-10);
        xbounds[i] = xtarg;
        zbounds[i] = ztarg;
        xtarg = *(x[thisx]+thisz)-(dx/2.0);
        if(myvx[i] >= 0.0)
        {
          xtarg = *(x[thisx]+thisz)+(dx/2.0);
        }
        slope = (myx[i] - myx[i-1])/(myz[i] - myz[i-1]+1.0e-10);
        ztarg = myz[i-1]+(xtarg-myx[i-1])/slope;
        xbounds_double[i] = xtarg;
        zbounds_double[i] = ztarg;
        for(int j = 0; j < numstored;j++)
        {
          if(*(*(*(marked[thisx_0]+thisz_0)+j)+beam) == 0)
          {
            *(*(*(marked[thisx_0]+thisz_0)+j)+beam) = raynum;
            *(*(present[thisx] + thisz) +beam) += 1.0;
            break;
          }
        }

      }else if(markingz[i] != markingz[i-1] )
      {
        ztarg = *(z[thisx] + thisz)-dz/2.0;
        if(myvz[i] < 0.0)
        {
          ztarg = *(z[thisx] + thisz)+dz/2.0;
        }
        slope = (myz[i] - myz[i-1])/(myx[i] - myx[i-1]+1.0e-10);
        xtarg = myx[i]+(ztarg-myz[i-1])/slope;
        xbounds[i]=xtarg;
        zbounds[i]=ztarg;
        for(int j = 0; j < numstored;j++)
        {
          if(*(*(*(marked[thisx_0]+thisz_0)+j)+beam) == 0)
          {
            *(*(*(marked[thisx_0]+thisz_0)+j)+beam) = raynum;
            *(*(present[thisx] + thisz) +beam) += 1.0;
            break;
          }
        }
      }else
      {
        xtarg = *(x[thisx] + thisz)-dx/2.0;
        if(myvx[i] < 0.0)
        {
          xtarg = *(x[thisx] + thisz)+dx/2.0;
        }
        slope = (myx[i] - myx[i-1])/(myz[i] - myz[i-1]+1.0e-10);
        ztarg = myz[i]+(xtarg-myx[i-1])/slope;
        xbounds[i]=xtarg;
        zbounds[i]=ztarg;
        for(int j = 0; j < numstored;j++)
        {
          if(*(*(*(marked[thisx_0]+thisz_0)+j)+beam) == 0)
          {
            *(*(*(marked[thisx_0]+thisz_0)+j)+beam) = raynum;
            *(*(present[thisx] + thisz) +beam) += 1.0;
            break;
          }
        }
      }
      uray[i] = uray[i-1];
	    int increment = uray[i];
      double xp = (myx[i] - *(x[thisx]+thisz)+dx/2.0)/dx;
	    double zp = (myz[i] - *(z[thisx]+thisz)+dz/2.0)/dz;
      if ( xp >= 0 && zp >= 0 ){
      double dl = zp;
      double dm = xp;
      double a1 = (1.0-dl)*(1.0-dm);		// blue		: (x  , z  )
      double a2 = (1.0-dl)*dm;		// green	: (x+1, z  )
      double a3 = dl*(1.0-dm);		// yellow	: (x  , z+1)
      double a4 = dl*dm;			// red 		: (x+1, z+1)
      *(edep[thisx+1]+thisz+1) += a1*increment;	// blue
      *(edep[thisx+2]+thisz+1) += a2*increment;	// green
      *(edep[thisx+1]+thisz+2) += a3*increment;	// yellow
      *(edep[thisx+2]+thisz+2) += a4*increment;	// red
    } else if ( xp < 0 && zp >= 0 ){
      double dl = zp;
      double dm = abs(xp);		// because xp < 0
      double a1 = (1.0-dl)*(1.0-dm);		// blue		: (x  , z  )
      double a2 = (1.0-dl)*dm;		// green	: (x-1, z  )
      double a3 = dl*(1.0-dm);		// yellow	: (x  , z+1)
      double a4 = dl*dm;			// red 		: (x-1, z+1)
      *(edep[thisx+1]+thisz+1) += a1*increment;	// blue
      *(edep[thisx]+thisz+1) += a2*increment;	// green
      *(edep[thisx+1]+thisz+2) += a3*increment;	// yellow
      *(edep[thisx]+thisz+2) += a4*increment;	// red
    } else if ( xp >= 0 && zp < 0 ){
      double dl = abs(zp);		// because zp < 0
      double dm = xp;
      double a1 = (1.0-dl)*(1.0-dm);		// blue		: (x  , z  )
      double a2 = (1.0-dl)*dm;		// green	: (x+1, z  )
      double a3 = dl*(1.0-dm);		// yellow	: (x  , z-1)
      double a4 = dl*dm;			// red 		: (x+1, z-1)
      (*(edep[thisx+1]+thisz+1)) += a1*increment;	// blue
      (*(edep[thisx+2]+thisz+1)) += a2*increment;	// green
      (*(edep[thisx+1]+thisz)) += a3*increment;	// yellow
      (*(edep[thisx+2]+thisz)) += a4*increment;	// red
    } else if ( xp < 0 && zp < 0 ){
      double dl = abs(zp);		// because zp < 0
      double dm = abs(xp);		// because xp < 0
      double a1 = (1.0-dl)*(1.0-dm);		// blue		: (x  , z  )
      double a2 = (1.0-dl)*dm;		// green	: (x-1, z  )
      double a3 = dl*(1.0-dm);		// yellow	: (x  , z-1)
      double a4 = dl*dm;			// red 		: (x-1, z-1)
      (*(edep[thisx+1]+thisz+1)) += a1*increment;	// blue
      (*(edep[thisx]+thisz+1)) += a2*increment;	// green
      (*(edep[thisx+1]+thisz)) += a3*increment;	// yellow
      (*(edep[thisx]+thisz)) += a4*increment;	// red
    } else {
      cout << "xp is" << xp<< "zp is"<< zp<<endl;
      double store = *(edep[thisx]+thisz);
      *(edep[thisx]+thisz) = store + (nuei[i] * (*(eden[thisx]+thisz))/ncrit * uray[i-1]*dt);
      cout << "***** ERROR in interpolation of laser deposition to grid!! *****" << endl;
      break;
    }
    amplitude_norm[i] = (pow(omega,2.0)-pow(*(wpe[thisx_00]+thisz_00),2.0))/(pow(omega,2.0)-pow(pow(*(wpe[thisx]+thisz),2.0),(1./4.)));
    mytime[i] = dt*i; // Sets the time, equal to the time step multiplied by the number of time steps

    // This will cause the code to stop following the ray once it escapes the extent of the plasma:
    if ( myx[i] < (xmin-(dx/2.0)) | myx[i] > (xmax+(dx/2.0)))
    {          // the "|" means "or" (symbol above the return key)
      int finalt = i-1;
      double* amp_norm = new double[finalt];
      double* rayx = new double[finalt];
      double* rayz = new double[finalt];
      for(int j = 0; j < finalt;j++)
      {
        amp_norm[j] = amplitude_norm[j];
        rayx[j] = myx[j];
        rayz[j] = myz[j];
      }
      break;                  // "breaks" out of the i loop once the if condition is satisfied
    } else if ( myz[i] < (zmin-(dz/2.0)) | myz[i] > (zmax+(dz/2.0))){   // the "|" means "or" (symbol above the return key)
      int finalt = i-1;
      double* amp_norm = new double[finalt];
      double* rayx = new double[finalt];
      double* rayz = new double[finalt];
      for(int j = 0; j < finalt;j++)
      {
        amp_norm[j] = amplitude_norm[j];
        rayx[j] = myx[j];
        rayz[j] = myz[j];
      }

  }
}
}
